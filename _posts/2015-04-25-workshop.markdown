---
title:  "Ubuntu/Mac System Setup for Machine Learning"
subtitle: "Only CPU configuration"
author: "Moitree Basu & Pradipta Deb"
avatar: "img/authors/wferr.png"
image: "img/f.jpg"
date:   2017-04-29 11:20:26 PM
---
# How to prepare your Ubuntu 16.04 or macOS Sierra 10.12.5 system for Machine Learning (CPU configuration)

Machine Learning is one of the most interesting and emerging research field in Computer Science today. Hundreds of efficient libraries are getting published each day. Often it's very difficult for students to keep up with this pace and setup a personal system for practice machine learning. Keeping that in mind, we've listed a series of simple steps to setup a working ML system from scratch through command-line with required explanation for each command. 

As Python has been the most widely used and user friendly coding language for ML purpose, we are providing instructions for Python 2.7 (or higher). Similarly, Python 3 (or higher) can also be installed depending on specific user requirements.

### Step 1: Pre-requisites
Before we start on python setup, make sure your system fulfills the some **pre-requisites**.

Check if your mac system has brew installed as package manager. If not, follow the [link](https://brew.sh/) for installation of Homebrew. If brew is already in your system, then update it:

```bash
$ brew update
$ brew doctor
```
If something is wrong with your brew installation, brew doctor will tell you the commands to rectify those.

Ubuntu users, update your system:

```bash
$ sudo apt-get update
```

### Step 2: Installing Python and Anaconda
Check your existing python location:

```bash
$ which python
```

In almost every unix system (Ubuntu or Mac) python comes pre-installed with the OS, but we recommend setting up a separate python for ML work so that in case something goes wrong the base OS doesn't have to handle that. For installing a new python, we suggest Anaconda. This can be downloaded from [here](https://www.continuum.io/downloads).
Once installed, run the commands: 

```bash
$ which python
$ which conda
```
to check whether you now have anaconda location as default python location. If not, add the anaconda path to your bash profile. Here, we assume it was installed in ~/anaconda. Open ~/.bash_profile (~/.bashrc for Ubuntu users) in your favourite editor, add the line, and save it.

```bash
export PATH=$HOME/anaconda/bin:$PATH

``` 
Restart your terminal session via ( for Ubuntu, $ source ~/.bashrc)

```bash
$ source ~/.bash_profile
```

If you have already installed Anaconda then check if it is updated, else update it.

```bash
$ conda -V
$ conda update conda
```
Type '**y**' to proceed, if the terminal asks for it for updating any specific packages(s).

### Step 3: Creating virtual Anaconda environment

Now, why do we need to create virtual conda environment?

//

Create a conda environment for Python version=2.7 with an alias. The same can be done for Python version=3.5 as well. It will install all the Python libraries associated with the Python version mentioned in the command.

```bash
$ conda create -n [name_of_the_environment] python=[version]
```
If Your default python is not Anaconda then you need to explicitly mention that in your command so that the environment uses Anaconda and not your system's default python.

```bash
conda create -n [name_of_the_environment] python=[version] anaconda
```
Press '**y**' when the prompt asks for your confirmation to proceed further.

### Step 4: Update pip

Update pip for Python 2.7:

```bash
$ pip install --upgrade
```
Same can be done for Python 3.5:

```bash
pip3 install --upgrade
```

### Step 5: Activate the virtual environment

Now, why do we need to activate the virtual conda environment?

We need to activate the virtual environment everytime we need to switch to the environment. Activation of the conda environment will modify the current path you are in and will get switched to the virtual environment you have created. Untill you deactivate the virtual environment, the shell variables will all point to the same. The command prompt will show the alias you have created for your environment. The following activates the environment:

```bash
$ source activate [name_of_the_environment]
```

### Step 6: Update pip inside your virtual environment

Same as we did before outside the virtual environment, we can update pip for Python 2.7 inside the environment now.

```bash
$ pip install --upgrade
```
Same can be done for Python 3.5:

```bash
pip3 install --upgrade
```

### Step 7: Installing Tensorflow in the virtual environment

Install Tensorflow inside this newly created virtual environment for Python 2.7. 

```bash
$ pip install tensorflow
```
Or you can run the following command for Python 3.5

```bash
$ pip3 install tensorflow
```
Outside this environment or once you deactivate the environment tensorflow will no longer be available.

### Step 8: Check successful installation of Tensorflow

Once, you have installed Tensorflow into your environment, check if it has been installed successfully. 

```bash
$ python
$ import tensorflow
```
If the prompt returns after executing these two command, then the installation is working fine.

Now, get out of the Python prompt:

```bash
$ exit()
```
  
### Step 9: Install additional Python packages like Keras

We can install additional Python package inside this  environment like Keras, which will use Tensorflow as backend. For Python 2.7:

```bash
$ pip install keras
```
Or for Python 3.5 it goes:

```bash
$ pip3 install keras
```
Caution: if you are still inside the Python prompt then run ```exit()``` command first and then install keras.

### Step 10: Check successful installation of Keras

Similarly, check if Keras has been installed successfully. 

```bash
$ python
$ import keras
```
If the prompt returns after executing these two command, then the installation is working fine.

Once again, get out of the Python prompt:

```bash
$ exit()
```

### Step 11: Deactivating a virtual environment

To terminate a session in the virtual environment, run the command:

```bash
$ source deactivate
```
after the word deactivate name of the environment is optional. If you do not put it explicitly it will terminate the current virtual environment you are in. Once you deactivate the virtual environment, you get back to your old path.

---------------------------------------

 6. Delete a no longer needed virtual environment

To delete a conda environment, enter the following, where yourenvname is the name of the environment you wish to delete.
conda remove -n yourenvname -all


  conda info -e
  257  python
  258  jupyter notebook
  259  conda install nbconda
  260  conda install nb_conda
  261  jupyter notebook
  262  conda install ipykernel
  263  conda install jupyter
  264  jupyter notebook
  265  source deactivate tf
  266  conda install nb_conda
  267  source activate tf
  268  jupyter notebook
  269  jupyter notebook
  270  source deactivate tf
  271  history
  272  tree Blog
  273  history >> ~/Desktop/Coding/Blog/Dl_prep_script.txt
subl ~/.bash_profile
source ~/.bash_profile
  alias tfactivate="source activate tf"
alias thactivate="source activate th"
alias deactivate="source deactivate"
alias bashreboot="source ~/.bash_profile"


Basic useful feature list:

 * Ctrl+S / Cmd+S to save the file
 * Ctrl+Shift+S / Cmd+Shift+S to choose to save as Markdown or HTML
 * Drag and drop a file into here to load it
 * File contents are saved in the URL so you can share files


I'm no good at writing sample / filler text, so go write something yourself.

Look, a list!

 * foo
 * bar
 * baz

And here's some code! :+1:

```python
$(function(){
  $('div').html('I am a div.');
});
def main():
	end
```

This is [on GitHub](https://github.com/jbt/markdown-editor) so let me know if I've b0rked it somewhere.


Props to Mr. Doob and his [code editor](http://mrdoob.com/projects/code-editor/), from which
the inspiration to this, and some handy implementation hints, came.

### Stuff used to make this:

 * [markdown-it](https://github.com/markdown-it/markdown-it) for Markdown parsing
 * [CodeMirror](http://codemirror.net/) for the awesome syntax-highlighted editor
 * [highlight.js](http://softwaremaniacs.org/soft/highlight/en/) for syntax highlighting in output code blocks
 * [js-deflate](https://github.com/dankogai/js-deflate) for gzipping of data to make it fit in URLs
